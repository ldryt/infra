{
  config,
  pkgs,
  lib,
  vars,
  ...
}:
{
  sops.secrets."services/ocis/secretsConfig".owner = config.users.users.colon.name;
  sops.secrets."services/ocis/s3/credentials".owner = config.users.users.colon.name;

  systemd.services.init-ocis-network = {
    description = "Create the network named ${vars.services.ocis.podmanNetwork}.";
    after = [ "network.target" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "oneshot";
    script = ''
      check=$(${pkgs.podman}/bin/podman network ls | grep "${vars.services.ocis.podmanNetwork}" || true)
      if [ -z "$check" ];
        then ${pkgs.podman}/bin/podman network create ${vars.services.ocis.podmanNetwork}
        else echo "${vars.services.ocis.podmanNetwork} already exists in podman"
      fi
    '';
  };

  system.activationScripts."makeOcisDataDir" = lib.stringAfter [ "var" ] ''
    mkdir -p ${vars.services.ocis.dataDir} && chown colon ${vars.services.ocis.dataDir}
  '';

  virtualisation.oci-containers.containers = {
    "ocis" = {
      image = "docker.io/owncloud/ocis:4.0.6@sha256:f4e4ebd5abfbc1da667fdc0e072061208597a0afe60ee8792be246deb09eb9b2";
      entrypoint = "/bin/sh";
      cmd = [
        "-c"
        "ocis server"
      ];
      environment = {
        PROXY_HTTP_ADDR = "0.0.0.0:9200";
        OCIS_URL = "https://${vars.services.ocis.subdomain}.${vars.zone}";

        OCIS_OIDC_ISSUER = "https://${vars.services.keycloak.subdomain}.${vars.zone}/realms/master";
        WEB_OIDC_CLIENT_ID = vars.services.ocis.oidcID;
        PROXY_TLS = "false";
        PROXY_AUTOPROVISION_ACCOUNTS = "true";
        PROXY_USER_OIDC_CLAIM = "preferred_username";
        PROXY_USER_CS3_CLAIM = "username";
        # PROXY_ROLE_ASSIGNMENT_DRIVER = "oidc";
        PROXY_OIDC_REWRITE_WELLKNOWN = "true";

        STORAGE_USERS_DRIVER = "s3ng";
        STORAGE_SYSTEM_DRIVER = "ocis";
        STORAGE_USERS_S3NG_ENDPOINT = "http://minio:9000";
        STORAGE_USERS_S3NG_REGION = "default";
        STORAGE_USERS_S3NG_BUCKET = vars.services.ocis.bucket;
        STORAGE_USERS_S3NG_ACCESS_KEY = "\${MINIO_ACCESS_KEY:?error message}";
        STORAGE_USERS_S3NG_SECRET_KEY = "\${MINIO_SECRET_KEY:?error message}";
      };
      environmentFiles = [ config.sops.secrets."services/ocis/s3/credentials".path ];
      # secretsConfig contains all the secrets needed by ocis (generated by "ocis init")
      volumes = [
        "${vars.services.ocis.dataDir}:/var/lib/ocis"
        "${config.sops.secrets."services/ocis/secretsConfig".path}:/etc/ocis/ocis.yaml:ro"
      ];
      ports = [ "127.0.0.1:${vars.services.ocis.internalPort}:9200" ];
      extraOptions = [ "--network=${vars.services.ocis.podmanNetwork}" ];
    };
    "minio" = {
      hostname = "minio";
      image = "docker.io/minio/minio:RELEASE.2024-02-17T01-15-57Z@sha256:e02b92b9df448c6c1a07dada58b690105afed2c344aa5195d36388ed33e19e7a";
      entrypoint = "/bin/sh";
      cmd = [
        "-c"
        "mkdir -p /data/${vars.services.ocis.bucket} && minio server /data"
      ];
      environment = {
        MINIO_ACCESS_KEY = "\${MINIO_ACCESS_KEY:?error message}";
        MINIO_SECRET_KEY = "\${MINIO_SECRET_KEY:?error message}";
      };
      environmentFiles = [ config.sops.secrets."services/ocis/s3/credentials".path ];
      volumes = [ "${vars.services.minio.dataDir}:/data" ];
      extraOptions = [ "--network=${vars.services.ocis.podmanNetwork}" ];
    };
  };

  sops.secrets."system/smb/glouton/minio-buckets/credentials" = { };
  environment.systemPackages = [ pkgs.cifs-utils ];
  fileSystems."${vars.services.minio.dataDir}" = {
    device = vars.sensitive.services.minio.smbShare;
    fsType = "cifs";
    options = [
      "async,rw,auto,nofail,credentials=${
        config.sops.secrets."system/smb/glouton/minio-buckets/credentials".path
      },uid=${toString config.users.users.colon.uid},cache=loose,fsc"
    ];
  };

  services.nginx.virtualHosts."${vars.services.ocis.subdomain}.${vars.zone}" = {
    enableACME = true;
    forceSSL = true;
    kTLS = true;
    locations."/".proxyPass = "http://127.0.0.1:${vars.services.ocis.internalPort}";
  };

  sops.secrets."backups/restic/ocis/repositoryPass".owner = config.users.users.colon.name;
  sops.secrets."backups/restic/ocis/sshKey".owner = config.users.users.colon.name;
  services.restic.backups.ocis = {
    user = "colon";
    paths = [ vars.services.ocis.dataDir ];
    repository = "sftp:${
      vars.sensitive.backups.user + "@" + vars.sensitive.backups.host
    }:restic-repo-ocis";
    extraOptions = [
      "sftp.command='ssh ${vars.sensitive.backups.user + "@" + vars.sensitive.backups.host} -p 23 -i ${
        config.sops.secrets."backups/restic/ocis/sshKey".path
      } -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -s sftp'"
    ];
    initialize = true;
    passwordFile = config.sops.secrets."backups/restic/ocis/repositoryPass".path;
    pruneOpts = [
      "--keep-daily 7"
      "--keep-weekly 8"
      "--keep-monthly 12"
      "--keep-yearly 100"
    ];
    timerConfig = {
      OnCalendar = "daily";
      RandomizedDelaySec = "6h";
      Persistent = true;
    };
  };
}
