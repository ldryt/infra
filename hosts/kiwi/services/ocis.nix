{
  config,
  pkgs,
  lib,
  vars,
  ...
}:
{
  sops.secrets."services/ocis/secretsConfig".owner = config.users.users.colon.name;
  sops.secrets."services/ocis/s3/credentials".owner = config.users.users.colon.name;

  systemd.services.init-ocis-network = {
    description = "Create the network named ${vars.services.ocis.podmanNetwork}.";
    after = [ "network.target" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "oneshot";
    script = ''
      check=$(${pkgs.podman}/bin/podman network ls | grep "${vars.services.ocis.podmanNetwork}" || true)
      if [ -z "$check" ];
        then ${pkgs.podman}/bin/podman network create ${vars.services.ocis.podmanNetwork}
        else echo "${vars.services.ocis.podmanNetwork} already exists in podman"
      fi
    '';
  };

  system.activationScripts."makeOcisDataDir" = lib.stringAfter [ "var" ] ''
    mkdir -p ${vars.services.ocis.dataDir} && chown colon ${vars.services.ocis.dataDir}
  '';

  virtualisation.oci-containers.containers = {
    "ocis" = {
      image = "docker.io/owncloud/ocis:4.0.6@sha256:f4e4ebd5abfbc1da667fdc0e072061208597a0afe60ee8792be246deb09eb9b2";
      entrypoint = "/bin/sh";
      cmd = [
        "-c"
        "ocis server"
      ];
      environment = {
        PROXY_HTTP_ADDR = "0.0.0.0:9200";
        OCIS_URL = "https://${vars.services.ocis.subdomain}.${vars.zone}";

        OCIS_OIDC_ISSUER = "https://${vars.services.authelia.subdomain}.${vars.zone}";
        WEB_OIDC_CLIENT_ID = vars.services.ocis.oidcID;
        WEB_OIDC_SCOPE = "openid profile groups email";
        PROXY_TLS = "false";
        PROXY_AUTOPROVISION_ACCOUNTS = "true";
        PROXY_OIDC_REWRITE_WELLKNOWN = "true";
        # PROXY_ROLE_ASSIGNMENT_DRIVER = "oidc";
        # PROXY_ROLE_ASSIGNMENT_OIDC_CLAIM = "groups";
        PROXY_OIDC_ACCESS_TOKEN_VERIFY_METHOD = "none";

        STORAGE_USERS_DRIVER = "s3ng";
        STORAGE_SYSTEM_DRIVER = "ocis";
        STORAGE_USERS_S3NG_ENDPOINT = "http://minio:9000";
        STORAGE_USERS_S3NG_REGION = "default";
        STORAGE_USERS_S3NG_BUCKET = vars.services.ocis.bucket;
        STORAGE_USERS_S3NG_ACCESS_KEY = "\${MINIO_ACCESS_KEY:?error message}";
        STORAGE_USERS_S3NG_SECRET_KEY = "\${MINIO_SECRET_KEY:?error message}";
      };
      environmentFiles = [ config.sops.secrets."services/ocis/s3/credentials".path ];
      # secretsConfig contains all the secrets needed by ocis (generated by "ocis init")
      volumes = [
        "${vars.services.ocis.dataDir}:/var/lib/ocis"
        "${config.sops.secrets."services/ocis/secretsConfig".path}:/etc/ocis/ocis.yaml:ro"
      ];
      ports = [ "127.0.0.1:${vars.services.ocis.internalPort}:9200" ];
      extraOptions = [ "--network=${vars.services.ocis.podmanNetwork}" ];
    };
    "minio" = {
      hostname = "minio";
      image = "docker.io/minio/minio:RELEASE.2024-02-17T01-15-57Z@sha256:e02b92b9df448c6c1a07dada58b690105afed2c344aa5195d36388ed33e19e7a";
      entrypoint = "/bin/sh";
      cmd = [
        "-c"
        "mkdir -p /data/${vars.services.ocis.bucket} && minio server /data"
      ];
      environment = {
        MINIO_ACCESS_KEY = "\${MINIO_ACCESS_KEY:?error message}";
        MINIO_SECRET_KEY = "\${MINIO_SECRET_KEY:?error message}";
      };
      environmentFiles = [ config.sops.secrets."services/ocis/s3/credentials".path ];
      volumes = [ "${vars.services.minio.dataDir}:/data" ];
      extraOptions = [ "--network=${vars.services.ocis.podmanNetwork}" ];
    };
  };

  sops.secrets."system/smb/glouton/minio-buckets/credentials" = { };
  environment.systemPackages = [ pkgs.cifs-utils ];
  fileSystems."${vars.services.minio.dataDir}" = {
    device = vars.sensitive.services.minio.smbShare;
    fsType = "cifs";
    options = [
      "async,rw,auto,nofail,credentials=${
        config.sops.secrets."system/smb/glouton/minio-buckets/credentials".path
      },uid=${toString config.users.users.colon.uid},cache=loose,fsc"
    ];
  };

  services.caddy.virtualHosts."${vars.services.ocis.subdomain + "." + vars.zone}".extraConfig = ''
    header {
      -Server
      Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
      X-Xss-Protection "1; mode=block"
      X-Content-Type-Options "nosniff"
      X-Frame-Options "DENY"
      Permissions-Policy interest-cohort=()
      Content-Security-Policy "upgrade-insecure-requests"
      Referrer-Policy "strict-origin-when-cross-origin"
      Cache-Control "public, max-age=15, must-revalidate"
      Feature-Policy "accelerometer 'none'; ambient-light-sensor 'none'; autoplay 'self'; camera 'none'; encrypted-media 'none'; fullscreen 'self'; geolocation 'none'; gyroscope 'none';       magnetometer 'none'; microphone 'none'; midi 'none'; payment 'none'; picture-in-picture *; speaker 'none'; sync-xhr 'none'; usb 'none'; vr 'none'"
    }
    reverse_proxy http://127.0.0.1:${vars.services.ocis.internalPort}
  '';

  services.authelia.instances."ldryt".settings.identity_providers.oidc = {
    access_token_lifespan = "2d";
    refresh_token_lifespan = "3d";

    # https://doc.owncloud.com/ocis/next/deployment/services/s-list/idp.html
    clients = [
      {
        description = "ownCloud Web";
        id = "${vars.services.ocis.oidcID}";
        public = true;
        consent_mode = "implicit";
        scopes = [
          "email"
          "groups"
          "openid"
          "profile"
        ];
        redirect_uris = [
          "https://${vars.services.ocis.subdomain + "." + vars.zone}/"
          "https://${vars.services.ocis.subdomain + "." + vars.zone}/oidc-callback.html"
          "https://${vars.services.ocis.subdomain + "." + vars.zone}/oidc-silent-redirect.html"
        ];
      }
      {
        description = "ownCloud Desktop";
        id = "xdXOt13JKxym1B1QcEncf2XDkLAexMBFwiT9j6EfhhHFJhs2KM9jbjTmf8JBXE69";
        secret = "UBntmLjC2yYCeHwsyj73Uwo9TAaecAetRwMw0xYcvNL9yRdLSUi0hUAHfvCHFeFh";
        consent_mode = "implicit";
        scopes = [
          "email"
          "groups"
          "openid"
          "profile"
          "offline_access"
        ];
        redirect_uris = [
          "http://127.0.0.1"
          "http://localhost"
        ];
        grant_types = [
          "refresh_token"
          "authorization_code"
        ];
      }
      {
        description = "ownCloud Android";
        id = "e4rAsNUSIUs0lF4nbv9FmCeUkTlV9GdgTLDH1b5uie7syb90SzEVrbN7HIpmWJeD";
        secret = "dInFYGV33xKzhbRmpqQltYNdfLdJIfJ9L5ISoKhNoT9qZftpdWSP71VrpGR9pmoD";
        consent_mode = "implicit";
        scopes = [
          "email"
          "groups"
          "openid"
          "profile"
          "offline_access"
        ];
        redirect_uris = [ "oc://android.owncloud.com" ];
        grant_types = [
          "refresh_token"
          "authorization_code"
        ];
      }
      {
        description = "ownCloud iOS";
        id = "mxd5OQDk6es5LzOzRvidJNfXLUZS2oN3oUFeXPP8LpPrhx3UroJFduGEYIBOxkY1";
        secret = "KFeFWWEZO9TkisIQzR3fo7hfiMXlOpaqP8CFuTbSHzV1TUuGECglPxpiVKJfOXIx";
        consent_mode = "implicit";
        scopes = [
          "email"
          "groups"
          "openid"
          "profile"
          "offline_access"
        ];
        redirect_uris = [
          "oc://ios.owncloud.com"
          "oc.ios://ios.owncloud.com"
        ];
        grant_types = [
          "refresh_token"
          "authorization_code"
        ];
      }
    ];
  };

  sops.secrets."backups/restic/ocis/repositoryPass".owner = config.users.users.colon.name;
  sops.secrets."backups/restic/ocis/sshKey".owner = config.users.users.colon.name;
  services.restic.backups.ocis = {
    user = "colon";
    paths = [ vars.services.ocis.dataDir ];
    repository = "sftp:${
      vars.sensitive.backups.user + "@" + vars.sensitive.backups.host
    }:restic-repo-ocis";
    extraOptions = [
      "sftp.command='ssh ${vars.sensitive.backups.user + "@" + vars.sensitive.backups.host} -p 23 -i ${
        config.sops.secrets."backups/restic/ocis/sshKey".path
      } -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -s sftp'"
    ];
    initialize = true;
    passwordFile = config.sops.secrets."backups/restic/ocis/repositoryPass".path;
    pruneOpts = [
      "--keep-daily 7"
      "--keep-weekly 8"
      "--keep-monthly 12"
      "--keep-yearly 100"
    ];
    timerConfig = {
      OnCalendar = "daily";
      RandomizedDelaySec = "6h";
      Persistent = true;
    };
  };
}
